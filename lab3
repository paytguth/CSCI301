#lang racket
;; F. Payton Guthrie
;; CSCI301
;; Lab 3

(define member?
  (lambda (x L)
    (if (null? L)
        #f
        (if (equal? x (car L))
            #t
            (member x (cdr L))
        )
    )
  )
)

(define subset?
  (lambda (L1 L2)
    (if (null? L1)
        #t
        (if (member? (car L1) L2)
            (subset? (cdr L1) L2)
            #f
        )
    )
  )
)

(define set-equal?
  (lambda (L1 L2)
    (if (and (subset? L1 L2) (subset? L2 L1))
       #t
       #f
    )
  )
)

(define intersect
  (lambda (L1 L2)
    (if (null? L1)
        L1
        (if (member? (car L1) L2)
           (append (list(car L1)) (intersect (cdr L1) L2))
           (intersect (cdr L1) L2)
        )
    )
  )
)

(define union
  (lambda (L1 L2)
    (if (null? L1)
        L2
        (if (member? (car L1) L2)
            (union (cdr L1) L2)
            (union (cdr L1) (cons (car L1) L2))
        )
    )
  )
)

